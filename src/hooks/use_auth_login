export interface LoginRequest {
  email: string;
  password: string;
}

export interface LoginResponse {
  access_token?: string;
  user?: {
    id: number;
    email: string;
    name: string;
    role: string;
  };
  requiresTwoFactor?: boolean;
  message?: string;
}

export interface Login2FARequest {
  email: string;
  password: string;
  token: string;
}

const API_URL = 'http://localhost:3001/api/v1';

export class AuthService {
  static async login(credentials: LoginRequest): Promise<LoginResponse> {
    const response = await fetch(`${API_URL}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(credentials),
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || 'Error en el login');
    }

    return response.json();
  }

  static async loginWith2FA(credentials: Login2FARequest): Promise<LoginResponse> {
    const response = await fetch(`${API_URL}/auth/login-2fa`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(credentials),
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || 'Error en el login 2FA');
    }

    return response.json();
  }

  static setToken(token: string) {
    localStorage.setItem('access_token', token);
  }

  static getToken(): string | null {
    return localStorage.getItem('access_token');
  }

  static removeToken() {
    localStorage.removeItem('access_token');
  }

  static isAuthenticated(): boolean {
    return !!this.getToken();
  }
}